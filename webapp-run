#!/bin/env bash

#
set -u



# ==== UTILITIES ====

function usage() {
	echo "Webapp Runner

Usage:
  webapp-run (-h|--help)  display help
  webapp-run (-r|--restart)
  webapp-run (-w|--webapp) <webapp> [-p|--port <port>] [-C|--context <path>] [-c|-cp|--classpath <path>] [-m|--map <resource> <path>] [-n|--no-run]

Options:
  -h --help                   Show this screen.
  -r --restart                Do not configure anything, just repeat last start
  -w --webapp <webapp>        WAR or expanded WAR to serve
  -p --port <port>            Port to listen
  -C --context <path>         Webapp context path, default /
  -c -cp --classpath <path>   Add classpath entry
  -m --map <resource> <path>  Map external resource on webapp path

Environment variables:
  ASSET_DIR                   Directory containing files additional to this script.
                              By default the directory where script is located.
  PATH_SEPARATOR              Path separator used to parse classpaths, colon (:) by default.
  TEMP                        Base for temporary directory to create CATALINA_BASE
                              (not used if CATALINA_BASE is set explicitly)
  CATALINA_HOME               Tomcat 8 installation directory (required)
  CATALINA_BASE               If set, use this directory, not create temporary in TEMP
  SHUTDOWN_PORT               That is to be configured in tomcat, 
                              by default random port in the range 10000-65000 is selected
  REALPATH_COMMAND            command to convert relative paths to absolute before writing to config files, 
                              default realpath itself
  STARTUP_COMMAND             command to start tomcat, default '\${CATALINA_HOME}/bin/startup.sh'

Configuration files
  webapp-runner loads configuration from /etc/webapp-runner-env then from ~/.config/webapp-runner/webapp-runner-env
  usung bash sourcing.
  last configuration is stored in ~/.local/share/webapp-runner

Cygwin notes
  When running on cygwin you may need to adjust some variables, for example:
  export REALPATH_COMMAND='cygpath -aw'
  export STARTUP_COMMAND='cmd.exe /C C:\\tomcat-8.5\\bin\\startup.bat'"
}

if [ -z "${1:-}" ]; then
	echo "options are needed"
	usage
	exit 1
fi

if [ \( "$1" == -h -o "$1" == --help \) -a -z "${2:-}" ]; then
	usage
	exit 0
fi

if [ \( "$1" == -r -o "$1" == --restart \) -a -z "${2:-}" ]; then
	if [ ! -f ~/.local/share/webapp-runner/last-environment -o ! ~/.local/share/webapp-runner/last-startup-command ]; then
		echo 'last configuration not found'
		exit 1
	fi
	set -a
	. ~/.local/share/webapp-runner/last-environment
	set +a
	eval $(cat ~/.local/share/webapp-runner/last-startup-command)
	exit 0
fi

function debug() {
	test true == "$DEBUG" && echo "debug: webapp-runner: $@" >&2
}


function debug-eval() {
	test true == "$DEBUG" && eval "$1"
}


## backup file (call before overwriting)
## usage: backup <FILE>
function backup() {
	FILE=$1
	if [ -f "$FILE" ]; then
		cp "$FILE" "$FILE.backup-$(date +%Y-%m-%d_%H-%M-%S-%N)"
	fi
}


## pass mustache-like template to stdin and get variables applied to it in stdout
## usage: $0 VAR1=a VAR2=b VAR3
function mustache() {

	## add backslashes ot the end of lines
	function sanitize() {
		cat <&0 | sed -e 's|\\|\\\\|g; s#|#\\|#g; s|\&|\\&|g; ' | sed -e '$ ! s|^\(.*\)$|\1\\|g'
	}

	local SED_COMMAND=
	while [ -n "${1+x}" ]; do
		debug "mustache: arg is $1"
		local  NAME=$(echo "$1" | cut -z -d= -f1)
		# todo escape replacement string
		local VALUE=$(echo "$1" | cut -z -d= -f2-)
		if [ "$NAME" == "$VALUE" ]; then
			VALUE=${!VALUE}
		fi
		VALUE=$(echo "$VALUE" | sanitize)
		#VALUE=$(echo "$VALUE" | tr '\n' "---new--line---")
		debug "mustache: NAME is $NAME, VALUE is $VALUE"
		SED_COMMAND="${SED_COMMAND}s|{{$NAME}}|$VALUE|g; "
		shift;
	done
	debug "SED_COMMAND is $SED_COMMAND"
	sed -e "$SED_COMMAND" <&0
}


## usage: $0 "$SHARED_LOADER_PATH"
function mk-catalina-properties() {
	cat "$ASSET_DIR/template/catalina.properties.in" \
			| mustache "SHARED_LOADER_PATH=$1"
}

## usage: $0 /path/to/webapp-root /context "$MAPPINGS"
function mk-context-xml() {
	cat "$ASSET_DIR/template/context.xml.in" | mustache "WEBAPP=$1" "CONTEXT=$2" "MAPPINGS=$3"
}

## usage: $0 /path/to/dir /path/to/mount/point
#export MAPPING_TEMPLATE=$(cat "$HOME/tmpl/mapping.in")
function mk-mapping() {
	debug "mk-mapping: arg#1 is $1 arg#2 is $2"
	cat "$ASSET_DIR/template/mapping.xml.in" | mustache "DIR=$1" "PATH=$2"
}

## $0 $PORT
function mk-server-xml() {
	debug "mk-server-xml: PORT is $PORT"
	cat "$ASSET_DIR/template/server.xml.in" | mustache "PORT=$1" "SHUTDOWN_PORT=$SHUTDOWN_PORT"
}

function escape-property() {
	sed -e 's/\\/\\\\/g' <&0
}




# ==== ENVIRONMENT ====

# load env files
if [ true != "${IGNORE_CONFIG_FILES:-false}" ]; then
	#OLDENV=$(set)
	set -a
	for ENV in /etc/webapp-runner-env ~/.config/webapp-runner/webapp-runner-env; do
		test -f "$ENV" && . "$ENV"
	done
	set +a
	#eval "$OLDENV" 2> /dev/null
fi

# defaults 
test -z "${DEBUG:-}"            && export DEBUG=false
test -z "${ASSET_DIR:-}"        && ASSET_DIR=$(dirname "$0")
test -z "${PATH_SEPARATOR:-}"   && PATH_SEPARATOR=':'
test -z "${TEMP:-}"             && export TEMP="${TMP:-/tmp}"
test -z "${CATALINA_BASE:-}"    && export CATALINA_BASE="$TEMP/webapp-runner/$(date +%Y-%m-%d_%H-%M-%S)"
test -z "${SHUTDOWN_PORT:-}"    && export SHUTDOWN_PORT=$(shuf -i 10000-65000 -n 1)
if [ -z "${STARTUP_COMMAND:-}" ]; then 
	# check required vars
	if [ -z "${CATALINA_HOME+x}" ]; then
		echo 'CATALINA_HOME should be set if STARTUP_COMMAND not set'
		exit 1
	fi
	STARTUP_COMMAND="'$CATALINA_HOME/bin/startup.sh'"
fi
test -z "${REALPATH_COMMAND:-}" && export REALPATH_COMMAND=realpath
debug "REALPATH_COMMAND is $REALPATH_COMMAND"

# check vars
if [ ! -d "$ASSET_DIR" ]; then
	echo "ASSET_DIR ($ASSET_DIR) not exists"
	exit 1
elif [ ! -d "$ASSET_DIR/template" ]; then
	echo "webapp runner script has been possibly moved out of its dir and ASSET_DIR ($ASSET_DIR) is not set or set wrong"
	exit 1
fi


alias _realpath="$REALPATH_COMMAND"

# ==== DEFAULT CLI ARGUMENTS ====
WEBAPP=
PORT=
CONTEXT=
CATALINA_CLASSPATH_LINES=
MAPPINGS=




# ==== PARSE COMMAND LINE ARGUMENTS ====
NEWLINE=$'\n'
if [ -n "$PATH_SEPARATOR" ]; then 
	READ_OPTS="-d '$PATH_SEPARATOR'"
	LINE_SUFFIX="$PATH_SEPARATOR"
else 
	READ_OPTS=
	LINE_SUFFIX=
fi
debug 'iterating over arguments...'
while [ -n "${1+x}" ]; do
	if   [ "$1" == -w -o "$1" == --webapp ]; then
		if [ -n "$WEBAPP" ]; then
			echo "duplicate parameter $1"
			exit 1
		fi
		if [ -z ${2+x} ]; then
			echo "no argument for param $1"
			exit 1
		fi
		export WEBAPP="$2"
		shift 2
	elif   [ "$1" == -p -o "$1" == --port ]; then
		if [ -n "$PORT" ]; then
			echo "duplicate parameter $1"
			exit 1
		fi
		if [ -z ${2+x} ]; then
			echo "no argument for param $1"
			exit 1
		fi
		export PORT="$2"
		shift 2
	elif [ "$1" == -C -o "$1" == --context ]; then
		if [ -n "$CONTEXT" ]; then
			echo "duplicate parameter $1"
			exit 1
		fi
		if [ -z ${2+x} ]; then
			echo "no argument for param $1"
			exit 1
		fi
		export CONTEXT="$2"
		shift 2
	elif [ "$1" == -c -o "$1" == --classpath -o "$1" == --cp ]; then
		if [ -z ${2+x} ]; then
			echo "no argument for param $1"
			exit 1
		fi
		while eval "read $READ_OPTS PART"; do
			if [ -n "$PART" ]; then
				CATALINA_CLASSPATH_LINES="$CATALINA_CLASSPATH_LINES$PART$NEWLINE"
			fi
		done <<< "$2$LINE_SUFFIX"
		shift 2
	elif [ "$1" == -m -o "$1" == --map ]; then
		if [ -z "${2:-}" -o -z "${3:-}" ]; then
			echo "not enough arguments for key $1 (two needed)"
			exit 1
		fi
		DIR=$(eval "$REALPATH_COMMAND '$2'")
		debug "DIR is $DIR"
		MAPPING=$(mk-mapping "$DIR" "$3")
		debug "while loop: MAPPING is $MAPPING"
		MAPPINGS="$MAPPINGS$MAPPING"
		# todo warning if $1 not exists
		shift 3
	else
		echo "wrong argument $1"
		exit 1
	fi
done
debug 'done iterating over arguments'
CATALINA_CLASSPATH_LINES=${CATALINA_CLASSPATH_LINES: : -1}
#CATALINA_CLASSPATH_LINES=${CATALINA_CLASSPATH_LINES//\\/\\}
CATALINA_CLASSPATH_LINES=$(echo "$CATALINA_CLASSPATH_LINES")
debug "CATALINA_CLASSPATH_LINES is $CATALINA_CLASSPATH_LINES 
============================================="



# parse classpath
SHARED_LOADER_PATH=

if [ -n "$CATALINA_CLASSPATH_LINES" ]; then
	echo -n 'parsing classpath...'
	CATALINA_CLASSPATH_LINES=$(echo "$CATALINA_CLASSPATH_LINES") # работает 0.01 с.
	#date +%M:%S.%N
	while read FILENAME; do # 0.017 c. просто итерация
		FILENAME=$($REALPATH_COMMAND "$FILENAME" | escape-property) # полный цикл с этой штукой 16 секунд
	 	SHARED_LOADER_PATH="$SHARED_LOADER_PATH\"$FILENAME\", \\
		" # с этой штукой плюс ещё секунда
	done <<< "$CATALINA_CLASSPATH_LINES"
	#date +%M:%S.%N
	SHARED_LOADER_PATH=${SHARED_LOADER_PATH: : -5}
	echo ' done'
fi

# ==== CHECK PARSED CLI ARGS ====


if [ -z "$PORT" ]; then
	PORT=8080
fi

if [ -z "$WEBAPP" ]; then
	echo 'webapp not set'
	exit 1
fi

# root context should be empty, not single slash
if [ "$CONTEXT" == / ]; then
	export CONTEXT=
fi


# ==== CONFIGURE CATALINA BASE ====

# copy template catalina_base
cp -rT "$ASSET_DIR/template/catalina-base" "$CATALINA_BASE"

# server.xml
mkdir -p "$CATALINA_BASE/conf"
backup "$CATALINA_BASE/conf/server.xml"
mk-server-xml "$PORT" > "$CATALINA_BASE/conf/server.xml"

# catalina.properties
mkdir -p "$CATALINA_BASE/conf"
backup "$CATALINA_BASE/conf/catalina.properties"
mk-catalina-properties "$SHARED_LOADER_PATH" > "$CATALINA_BASE/conf/catalina.properties"

# context.xml
mkdir -p "$CATALINA_BASE/conf/Catalina/localhost"
backup "$CATALINA_BASE/conf/Catalina/localhost/ROOT.xml"
NORM_WEBAPP=$(eval $REALPATH_COMMAND "$WEBAPP")
mk-context-xml "$NORM_WEBAPP" "$CONTEXT" "$MAPPINGS" > "$CATALINA_BASE/conf/Catalina/localhost/ROOT.xml"

mkdir -p "$CATALINA_BASE/logs" "$TEMP"

echo "folder $CATALINA_BASE is configured to be CATALINA_BASE"



# save last configuration
mkdir -p ~/.local/share/webapp-runner
set > ~/.local/share/webapp-runner/last-environment
echo "$STARTUP_COMMAND" > ~/.local/share/webapp-runner/last-startup-command



# ==== RUN TOMCAT ====
echo "shutdown port is $SHUTDOWN_PORT"
#export CATALINA_HOME=$(_realpath $CATALINA_HOME)
#export CATALINA_BASE=$(_realpath $CATALINA_BASE)
debug "final CATALINA_BASE is $CATALINA_BASE"
debug "STARTUP_COMMAND is $STARTUP_COMMAND"
eval "$STARTUP_COMMAND"
